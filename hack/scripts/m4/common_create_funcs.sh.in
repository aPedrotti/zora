create_svc_account() {
	kubectl --context $CONTEXT -n $SVC_ACCOUNT_NS create serviceaccount $SVC_ACCOUNT_NAME
}

create_svc_account_secret() {
cat << EOF | kubectl --context $CONTEXT create -f -
apiVersion: v1
kind: Secret
metadata:
  name: "$SVC_ACCOUNT_SECRET_NAME"
  namespace: "$SVC_ACCOUNT_SECRET_NS"
  annotations:
    kubernetes.io/service-account.name: "$SVC_ACCOUNT_NAME"
type: kubernetes.io/service-account-token
EOF
}

create_cluster_role() {
cat << EOF | kubectl --context $CONTEXT apply -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: $CLUSTER_ROLE_NAME
rules:
  - apiGroups: [ "" ]
    resources:
      - configmaps
      - endpoints
      - limitranges
      - namespaces
      - nodes
      - persistentvolumes
      - persistentvolumeclaims
      - pods
      - replicationcontrollers
      - secrets
      - serviceaccounts
      - services
    verbs: [ "get", "list" ]
  - apiGroups: [ "apps" ]
    resources:
      - daemonsets
      - deployments
      - statefulsets
      - replicasets
    verbs: [ "get", "list" ]
  - apiGroups: [ "autoscaling" ]
    resources:
      - horizontalpodautoscalers
    verbs: [ "get", "list" ]
  - apiGroups: [ "networking.k8s.io" ]
    resources:
      - ingresses
      - networkpolicies
    verbs: [ "get", "list" ]
  - apiGroups: [ "policy" ]
    resources:
      - poddisruptionbudgets
      - podsecuritypolicies
    verbs: [ "get", "list" ]
  - apiGroups: [ "rbac.authorization.k8s.io" ]
    resources:
      - clusterroles
      - clusterrolebindings
      - roles
      - rolebindings
    verbs: [ "get", "list" ]
  - apiGroups: [ "metrics.k8s.io" ]
    resources:
      - pods
      - nodes
    verbs: [ "get", "list" ]
  - apiGroups: [ batch ]
    resources:
      - jobs
      - cronjobs
    verbs: [ "get", "list" ]
  - apiGroups: [ admissionregistration.k8s.io ]
    resources:
      - validatingwebhookconfigurations
      - mutatingwebhookconfigurations
    verbs: [ "get", "list" ]
EOF
}

create_cluster_role_binding() {
	kubectl --context $CONTEXT create clusterrolebinding $SVC_ACCOUNT_NAME \
		--clusterrole=$CLUSTER_ROLE_NAME \
		--serviceaccount=$SVC_ACCOUNT_NS:$SVC_ACCOUNT_NAME
}

create_kubeconfig() {
cat << EOF > $KCONFIG_NAME
apiVersion: v1
kind: Config
current-context: $CONTEXT
contexts:
  - name: $CONTEXT
    context:
      cluster: $CONTEXT
      user: $SVC_ACCOUNT_NAME
      namespace: $SVC_ACCOUNT_NS
clusters:
  - name: $CONTEXT
    cluster:
      certificate-authority-data: $CLUSTER_CA
      server: $CLUSTER_SERVER
users:
  - name: $SVC_ACCOUNT_NAME
    user:
      token: $TOKEN_VALUE
EOF
}
